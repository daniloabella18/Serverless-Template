# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: curso-sls-hola-mundo
# app and org for use with dashboard.serverless.com
app: curso-sls-hola-mundo
org: daniloabella

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: "2"

provider:
  name: aws
  runtime: nodejs12.x
  lambdaHashingVersion: 20201221
  region: sa-east-1
  profile: danilo
  timeout: 30

plugins:
  - serverless-offline

# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  patterns:
#    - '!exclude-me.js'
#    - '!exclude-me-dir/**'
#    - include-me.js
#    - include-me-dir/**

functions:
  food:
    handler: handleFood.getFood
    events:
      - http:
          method: GET
          path: /api/food
          cors: true # <-- CORS!
  createFood:
    handler: handleFood.createFood
    events:
      - http:
          method: POST
          path: /api/food
          cors: true # <-- CORS!
  putFood:
    handler: handleFood.putFood
    events:
      - http:
          method: PUT
          path: /api/food
          cors: true # <-- CORS!
  deleteFood:
    handler: handleFood.deleteFood
    events:
      - http:
          method: DELETE
          path: /api/food/{id}
          cors: true # <-- CORS!
